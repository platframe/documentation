section(id="images" class="images")

    h2 Images

    p.
        The #[code.folder images] directory prescribes a logical grouping of assets
        against their respective scope and function, ensuring a flexible, yet
        intuitive file system. It forks into #[em subject] groups, which in turn
        are organized by #[em implementation] identifiers.

    .explain.code

        .image.map

            pre
                code.

                    #[i.i-emoji-folder] images ─┐
                               ├─ #[i.i-emoji-folder] global ─┐
                               |             ├─ #[i.i-emoji-folder] brand ─┐
                               |             |            #[i.i-emoji-folder] _symbols ─┐
                               |             |                         └─ #[i.i-emoji-picture] logo.svg
                               |             └─ #[i.i-emoji-folder] _link ─┐
                               |                            └─ #[i.i-emoji-picture] favicon.png
                               |
                               ├─ #[i.i-emoji-folder] home ─┐
                               |           ├─ #[i.i-emoji-folder] icons ─┐
                               |           |            #[i.i-emoji-folder] _views ─┐
                               |           |                       ├─ #[i.i-emoji-picture] icon-1.svg
                               |           |                       └─ #[i.i-emoji-picture] icon-2.svg
                               |           └─ #[i.i-emoji-folder] _inline ─┐
                               |                          └─ #[i.i-emoji-picture] background.jpg
                               └─ #[i.i-emoji-folder] about ─┐
                                            ┆
            aside structure #[b 6.1]

    h3 Subjects

    p.
        #[em Subject] directories do not begin with an underscore and should
        receive names that indicate the context they represent. For instance, a
        #[code.folder global] folder may be created to house images that are used
        across the project, while the images in #[code.folder home] or
        #[code.folder about] are specific to those views.
    p.
        In figure 6.1 there are three subject groups, #[code.folder global],
        #[code.folder home] and #[code.folder about]. The #[code.folder brand] and
        #[code.folder icons] folders represent additional #[em nested] subject
        groups. These “offspring” subjects can be used as necessary for added
        clarification.

    h3 Implementations

    p.
        The build system determines the appropriate image processing steps by
        inferring the implementation type from the directory name. To signify
        their significance, avoid naming collisions with subject groups, and
        speed up visual grepping of the file system, implementation directories
        are prefixed with an underscore.

    p.
        There are currently four implementation types under which image assets
        that share a particular type may be grouped. These are
        #[code.folder _inline] and #[code.folder _link] for discrete graphics, as
        well as #[code.folder _symbols] and #[code.folder _views] for vector sprites.
        We'll explore each of them in the next sections.

    h4 Inline

    p.
        To designate images for inlining into either markup or styles, place them in a folder named #[code.folder _inline] within #[code.folder images]. A #[em relative path] to #[code.folder src] is required when referencing these assets. Additionally, to inline an image in your markup you'll need to add #[code inline] as an attribute of the element in question.

    p Usage within markup

    .explain.code

        .pug

            pre
                code.language-pug.

                    // embed a vector as SVG
                    img(src="images/section-a/_inline/graphic.svg" inline)

                    // embed a bitmap as base64
                    img(src="images/section-b/_inline/picture.png" inline)

            aside index.pug #[b 6.2]

    p Usage within styles

    .explain.code

        .styl

            pre
                code.language-stylus.

                    background: url("images/section-c/_inline/drawing.svg")

            aside index.styl #[b 6.3]

    aside
        h6.i-emoji-hammer-wrench Development notes
        ul
            li.
                User agents enforce limits on URL length, thereby restricting the size of images inlined via the URL method.


    aside
        h6.i-emoji-rocket Performance notes
        ul
            li.
                Inline images are not individually cached by the user agent.
            li.
                Embedded images may improve page load time by reducing the
                amount of server round trips.
            li.
                Bitmaps inlined in Platframe will be converted to #[i base64]
                encoding, which tend to inflate the original binary size by
                roughly 30%.

    aside
        h6.i-emoji-gear Build notes
        ul
            li.
                Inline vectors are minified.
            li.
                Only bitmaps will be converted to #[i base64].

    h4 Link

    p.
        Earmark discrete graphics that are linked to from within the source by
        grouping them in a #[code.folder _link] directory (fig. 6.1).

    aside
        h6.i-emoji-gear Build notes
        ul
            li.
                If additional optimization is possible, linked #[code .svg],
                #[code .png] and #[code .jpg] files will be minified the during
                the build phase.

    h4 Sprites

    p.
        Vector sprites are supported through both its #[code view] and
        #[code symbol] variants. For example, to add #[code icon.svg] to the
        project's “symbol” sprite, place it in a folder named
        #[code.folder _symbols], or to add it to the “view” sprite, place it in a
        #[code.folder _views] folder in stead.
    p.
        Continuing with the example above, the image in #[code.folder brand] will
        be appended to the #[em symbols] sprite and the images in
        #[code.folder icons] will be added to the #[em view] sprite. The resulting sprite sheets are consumed from the top-level #[code.folder _sprites] within the respective build's #[code.folder /assets/images].

    p Usage within markup

    .explain.code

        .pug

            pre
                code.language-pug.

                    svg: use(xlink:href="/assets/images/_sprites/symbols.svg#icon")

            aside index.pug #[b 6.4]

    p Usage within styles

    .explain.code

        .styl

            pre
                code.language-stylus.

                    background: url("/assets/images/_sprites/views.svg#icon")

            aside index.styl #[b 6.5]

    aside
        h6.i-emoji-hammer-wrench Development notes
        ul
            li.
                The name of an image will become its #[em fragment identifier]
                within the designated sprite sheet. At this stage you'll need to
                ensure that images destined for sprite consumption have unique
                names.

    aside
        h6.i-emoji-gear Build notes
        ul
            li.
                Vectors will undergo minification before being included in a sprite sheet.

    aside
        h6.i-emoji-rocket Performance notes
        ul
            li.
                Sprites reduce HTTP lookups and are cacheable.

    h5 Rasters

    p.
        Platframe does not support traditional raster sprites. If your project
        require such a sprite sheet format, you may either extend the existing
        tooling or produce it manually and place it in a #[code.folder _link]
        folder from where you can source it.
