section(id="styles" class="styles")

    h2 Styles

    .explain.code

        .styl.map

            pre
                code.

                    #[i.i-emoji-folder] styles ─┐
                              ├─ #[i.i-emoji-folder] _
                              ├─ #[i.i-emoji-folder] views
                              └─ #[i.i-emoji-file] root.styl

            aside structure #[b 4.1]

    p.
        The #[code.folder styles] directory is the central location from which we manage the project's presentation. It expands into #[code.folder _], #[code.folder views] and #[code.file root.styl]. Styles are structured similar to #[em templates] in that both have their content logically grouped with respect to its scope, either #[i global] or #[i local].

    aside
        h6 &#9881; Build notes
        ul
            li.
                #[i Autoprefixer] will apply vendor prefixes according to the configuration in #[code.file .browserslistrc].
            li.
                Only unique media queries remain after a build. Queries are combined by platform (target value) with their associated styles and then stacked in a mobile-first order. As there is no additional impact on performance, you can use the media #[a(href="#styles-mixins") mixins] liberally for granular control.

    h3#styles-global Global

    p.
        General styles that have a site-wide impact are grouped according to type and referred to as being #[em global]. These are #[code.file root.styl] and those contained in #[code.folder _] (the partials folder), which are #[code.folder modules], #[code.folder plugins] and #[code.folder elements].

    h5#styles-root Root

    .explain.code

        .styl

            pre
                code.language-stylus.

                    @require '_/modules'
                    @require '_/utilities'
                    @require '_/plugins'
                    @require '_/elements'

                    @require 'views'

            aside root.styl #[b 4.2]

    p.
        As the name suggests, #[code.file root.styl] serves to unify the integral parts of our styles. To ensure all dependencies are met at build time, we first load the partials from #[code.folder _] after which we process the individual view styles.

    h5#styles-partials Partials

    p.
        #[code.folder _] is a direct child of #[code.folder styles] and houses the global partials. #[code.file root.styl] is responsible for including these partials in a dependency-sensitive manner. We first pull in #[code.folder modules], containing our base styles. We then fetch the utility class modules from #[code.folder utilities], comprised of high-level functional classes. Up next is #[code.folder plugins] which in turn makes all component and other external styles available for use. Finally, #[code.folder elements] is where we manage elements (or sections) of the project that are common to all views, like headers and footers.

    h4#styles-modules Modules

    .explain.code

        .styl.map

            pre
                code.

                    #[i.i-emoji-folder] modules ─┐
                                ├─ #[i.i-emoji-file] cache.styl      #[span.comment &middot; various placeholder styles]
                                ├─ #[i.i-emoji-file] equalize.styl   #[span.comment &middot; normalize / reset rules]
                                ├─ #[i.i-emoji-file] forms.styl      #[span.comment &middot; form defaults]
                                ├─ #[i.i-emoji-file] globals.styl    #[span.comment &middot; sundry global variables]
                                ├─ #[i.i-emoji-file] graphics.styl   #[span.comment &middot; image/graphic defaults]
                                ├─ #[i.i-emoji-file] layout.styl     #[span.comment &middot; basic structural styles]
                                ├─ #[i.i-emoji-file] media.styl      #[span.comment &middot; media and platform defaults]
                                ├─ #[i.i-emoji-file] tables.styl     #[span.comment &middot; table defaults]
                                |
                                ├─ #[i.i-emoji-folder] color ─┐
                                |            ├─ #[i.i-emoji-file] index.styl    #[span.comment &middot; set primary scheme]
                                |            ├─ #[i.i-emoji-file] palette.styl  #[span.comment &middot; global defaults]
                                |            ├─ #[i.i-emoji-file] keys.styl     #[span.comment &middot; shorthand references]
                                |            └─ #[i.i-emoji-folder] schemes ─┐
                                |                           ├─ #[i.i-emoji-folder] dark  #[span.comment &middot; scheme package]
                                |                           ├─ #[i.i-emoji-folder] gray
                                |                           ├─ #[i.i-emoji-folder] light ─┐
                                |                           ┆            ├─ #[i.i-emoji-file] index.styl
                                |                                        ├─ #[i.i-emoji-file] palette.styl
                                |                                        └─ #[i.i-emoji-file] dictionary.styl
                                |
                                ├─ #[i.i-emoji-folder] mixins ─┐  #[span.comment &middot; manage mixins / functions]
                                |             |
                                |             ├─ #[i.i-emoji-file] color.styl
                                |             ├─ #[i.i-emoji-file] conversion.styl
                                |             ├─ #[i.i-emoji-file] effects.styl
                                |             ├─ #[i.i-emoji-file] interaction.styl
                                |             ├─ #[i.i-emoji-file] layout.styl
                                |             ├─ #[i.i-emoji-file] platform.styl
                                |             └─ #[i.i-emoji-file] text.styl
                                |
                                └─ #[i.i-emoji-folder] text ─┐
                                            ├─ #[i.i-emoji-file] index.styl
                                            ├─ #[i.i-emoji-folder] domains ─┐  #[span.comment &middot; defaults for markup domains]
                                            |              |
                                            |              ├─ #[i.i-emoji-file] anchors.styl
                                            |              ├─ #[i.i-emoji-file] body.styl
                                            |              ├─ #[i.i-emoji-file] custom.styl
                                            |              ├─ #[i.i-emoji-file] forms.styl
                                            |              ├─ #[i.i-emoji-file] headings.styl
                                            |              ├─ #[i.i-emoji-file] lists.styl
                                            |              ├─ #[i.i-emoji-file] modifiers.styl
                                            |              ├─ #[i.i-emoji-file] monospaced.styl
                                            |              └─ #[i.i-emoji-file] paragraphs.styl
                                            |
                                            ├─ #[i.i-emoji-folder] fonts ─┐
                                            |            ├─ #[i.i-emoji-file] font.styl  #[span.comment &middot; face rules]
                                            |            ┆
                                            |
                                            └─ #[i.i-emoji-folder] stacks ─┐
                                                          ├─ #[i.i-emoji-file] serif.styl
                                                          ┆

            aside modules #[b 4.3]

    p.
        The #[code.folder modules] directory group together all the generic, foundational styles. Use #[code.file index.styl] for both activating existing modules and adding new ones. Figure 4.3 presents a terse summary of each module's function. While most modules are self-explanatory, we'll cover the more involved ones next.

    h5#styles-color Color

    p.
        Colors are managed centrally from within the #[code.folder color] module. Platframe has a unique color system that combines the characteristics of schemes and scopes with the cascade. This enables rapid, consistent and precise color modification.

    h6#styles-color-palette Palette

    p.
        Default colors that do not belong to a scheme package are managed from the top-level #[code.file palette.styl]. This may include colors that belong to a custom theme, gradients and sundry color classes.

    h6#styles-color-schemes Schemes

    p.
        A color scheme is comprised of a package consisting of 3 files. Schemes are self-contained and thus good for sharing between disparate Platframe projects.

    ol
        li #[code.file index.styl] &nbsp;&rarr;&nbsp; pulls in the dependants
        li #[code.file palette.styl] &nbsp;&rarr;&nbsp; tie color values to special scheme variables
        li #[code.file dictionary.styl] &nbsp;&rarr;&nbsp; hooks into the palette to build scheme

    .explain.code

        .styl

            pre
                code.language-stylus.

                    .class
                        color: scheme.default
                        background: scheme.background

            aside .styl #[b 4.4]

    p.
        Color dictionaries enable both internal as well as component styles to reference common, generic color combinations. This means that color values which are authored against Platframe's scheme protocol are decoupled from arbitrary colors and can thus receive its ink from the active (parent) scheme. Figure 4.4 illustrate rules with basic dictionary references.

    .explain.code

        .styl

            pre
                code.language-stylus.

                    header
                        color: scheme.header.default
                        svg
                            fill: scheme.header.vector

            aside .styl #[b 4.5]

    p.
        Dictionaries are multi-dimensional to allow for more precision through the use of "scopes". Scopes are special name-spaced sections defined in palettes and their related dictionaries to target specific areas of the interface. For example, areas like #[code nav], #[code header] and #[code footer] make a good case for scope creation as they often require some degree of deviation from the basic scheme. Figure 4.5 samples a #[i header] scope in action.

    h6#styles-color-keys Keys

    p.
        #[code.file keys.styl] contains shorthand references to the hierarchical color relationships of the active scheme.

    h6 Conventions

    p.
        Naming conventions help to avoid namespace collision and makes it easier to identify a variable's purpose.

    .explain.code

        .styl

            pre
                code.language-stylus.

                    // general colors: single underscore prefix
                    _color = #FF6347
                    // scheme colors: double underscore prefix
                    __scheme_default = #000
                    // gradients: triple underscore prefix
                    ___gradient = #FFF 0%, #AAA 100%

            aside .styl #[b 4.6]

    h5#styles-mixins Mixins

    p.
        The style module ships with a number of convenience methods to speed up development. They are categorized according to their functionality and grouped within sub-modules contained in #[code.folder mixins].

    h6#styles-mixins-color Color

    p.mixin: code schemer(scheme)

    p.
        Provides the ability to supersede the active global scheme on a local (view) level. Useful in scenarios where a sub-section is themed differently from the rest of the project. Call this mixin at the root level of the parent selector common to the target section(s) and pass it a valid scheme name from a package in #[code.folder schemes]. Also affects nested components.

    .explain.code

        .pug

            pre
                code.language-pug.

                    body(class="fancy")

            aside .pug #[b 4.7]

    .explain.code

        .styl

            pre
                code.language-stylus.

                    .fancy
                        schemer(gray)

            aside .styl #[b 4.8]

    p.mixin: code anchors(scheme, [scope])

    p.
        Exclusively target anchor elements for scheme change. May pass an existing scheme-scope as a second argument to increase precision.

    .explain.code

        .styl

            pre
                code.language-stylus.

                    // target general anchors
                    .special-links
                        anchors(gray)

                    // override link values in scheme scope
                    .dark-footer-links
                        anchors(dark, footer)

            aside .styl #[b 4.9]

    h6#styles-mixins-conversion Conversion

    p.mixin: code rem(32px)

    p.
        Convert pixel values to #[em rem] units with #[code rem()] (fig. 4.10)

    .explain.code

        .styl

            pre
                code.language-stylus.

                    font-size: rem(32px) // 2rem; :root = 16px

            aside .styl #[b 4.10]

    h6#styles-mixins-platform Platform

    p.mixin
        code +min(val)
        span &#8192;|&#8192;
        code +max(val)
        span &#8192;|&#8192;
        code +between(val, val)

    p.
        These dimensional media query helpers allow granular control in responsive design. Acceptable arguments are literal values as well as numbers or keyword identifiers correlating to the viewport scale as specified in #[code.file media.styl] (fig. 4.11).


    .explain.code

        .styl

            pre
                code.language-stylus.

                    // target first breakpoint range
                    +min(1)
                    // pass an arbitrary literal
                    +max(500px)
                    // target range between 2nd &amp; 3rd breakpoints
                    +between(second, third)

            aside .styl #[b 4.11]

    p.mixin
        code +min-res(val)
        span &#8192;|&#8192;
        code +max-res(val)

    p.
        Target the platform's pixel density with resolution helpers.


    .explain.code

        .styl

            pre
                code.language-stylus.

                    // dots per pixel
                    +min-res(2x)
                    // dots per inch
                    +max-res(400dpi)

            aside .styl #[b 4.12]

    aside
        h6.i-emoji-hammer-wrench Development notes
        ul
            li.
                Before beginning development, check to see if the defaults in the breakpoint-array suit your UI's design and functionality. Breakpoints are managed in #[code.file media.styl], located in #[code.folder modules].

    aside
        h6.i-emoji-rocket Performance notes
        ul
            li.
                The dimensional media query mixins may be used liberally for fine control in a responsive design. While the impact on performance may be negligible, duplicate media queries are still factored out during a build, leaving only unique combinations with their associated rules to make it through to the production stylesheet.

    h6#styles-mixins-grid Grid

    p.mixin: code grid(width)

    p.
        The grid routine enables responsive, grid-based development (fig. 4.12). Check out #[code.file layout.styl] in the mixins module for more configuration options.

    .explain.code

        .styl

            pre
                code.language-stylus.

                    definition = 12    // set granularity
                    interstice = 15px  // set gutter

                    // 1 column / parent's full width
                    .example-1
                       grid(12)

                    // 3 columns &amp; active gutter
                    .example-2
                       grid('third', true)

                    // 2 columns, active gutter, override gutter
                    .example-3
                       grid(6, true, 2%)

            aside .styl #[b 4.13]


    aside
        h6 &#128736; Development notes
        ul
            li.
                Flexbox is used by default for document layout. You can complement or replace this approach by using the #[a(href="#styles-mixins") grid mixin] for responsive, grid-based development. Both useful for supporting older UA's and as an alternative layout mode until native CSS grids enjoy sufficient support.

    h4#styles-utilities Utilities

    .explain.code

        .styl.map

            pre
                code.

                    #[i.i-emoji-folder] utilities ─┐
                                  ├─ #[i.i-emoji-file] index.styl
                                  ├─ #[i.i-emoji-file] button.styl
                                  ┆

            aside utilities #[b 4.14]

    p.
        Platframe has two types of utility classes: lower-level utilities like those in the #[code.folder layout] module, and the higher-level "surface" classes. Low level utilities are all contained within the bounds of #[code.folder modules]. The latter type, "surface" utilities live in the top-level #[code.folder utilities] directory as denoted by the diagram above. "Surface" utilities are so called because they tend to be more abstract and are positioned to be consumers of the foundational code in #[code.folder modules]. Whether the occasion calls for it, or whether it is the preferred approach to styling, #[code.folder utilities] are suited for functional CSS classes with various degrees of abstraction and composition. Platframe ships with  #[code.file button.styl] which is an example of transforming the #[code button()] mixin into a set of utility classes.

    h4#styles-plugins Plugins

    .explain.code

        .styl.map

            pre
                code.

                    #[i.i-emoji-folder] plugins ─┐
                                ├─ #[i.i-emoji-file] index.styl
                                ├─ #[i.i-emoji-folder] plugin-a ─ #[i.i-emoji-file] plugin.styl
                                └─ #[i.i-emoji-folder] plugin-b ─ #[i.i-emoji-file] plugin.css

            aside plugins #[b 4.14]

    p.
        External style resources can be used by linking to it from #[code.file index.styl] in #[code.folder plugins]. Since Platframe's native components are essentially plugins too, their styles are made available for use throughout our primary sheets by linking to them from here.

    h4#styles-elements Elements

    .explain.code

        .styl.map

            pre
                code.

                    #[i.i-emoji-folder] elements ─┐
                                 ├─ #[i.i-emoji-file] index.styl
                                 ├─ #[i.i-emoji-file] header.styl
                                 └─ #[i.i-emoji-file] footer.styl

            aside elements #[b 4.15]

    p.
        The styling of features that are commonly shared among views can be defined in #[code.folder elements]. Figure 4.14 illustrates how the style rules for the #[code &lt;header&gt;] and #[code &lt;footer&gt;] elements are segregated by default. We take specificity into account by deploying these features only as direct children of the #[code &lt;body&gt;] element, allowing for easier overriding in scenarios where the default needs adaptation or replacement.

    h3#styles-local Local

    p.
        Style files with local, page-level scope are confined to the #[code.folder views] directory.

    h4#styles-views Views

    .explain.code

        .styl.map

            pre
                code.

                    #[i.i-emoji-folder] views ─┐
                              ├─ #[i.i-emoji-file] index.styl
                              ├─ #[i.i-emoji-folder] home ─────┐
                              |               ├─ #[i.i-emoji-file] _hello.styl
                              |               ├─ #[i.i-emoji-file] _story.styl
                              |               ├─ #[i.i-emoji-file] _convert.styl
                              |               └─ #[i.i-emoji-file] index.styl
                              |
                              ├─ #[i.i-emoji-folder] category-1 ─ #[i.i-emoji-file] index.styl
                              ├─ #[i.i-emoji-folder] category-2 ─ #[i.i-emoji-file] index.styl
                              └─ #[i.i-emoji-folder] category-3 ─┐
                                                ├─ index.styl
                                                ├─ #[i.i-emoji-folder] sub-1 ─ #[i.i-emoji-file] index.styl
                                                └─ #[i.i-emoji-folder] sub-2 ─ #[i.i-emoji-file] index.styl

            aside views #[b 4.16]

    p.
        View styles are modular and pertain to specific sections and the pages within them. Referring to the example directory structure above (figure 4.15), we see that each section has a primary stylesheet in the form of #[code.file index.styl] and may divide into any number of sub-sections. Akin to templates, this is a structural pattern that holds regardless of hierarchical depth or breadth.

    p.
        You may notice parity in how our #[em style views] are structured in relation to their counterpart #[em markup views] within #[code.folder templates]. Keeping with this pattern leads to a more intuitive file system.

    h5#styles-views-partials View Partials

    p.
        Similar to templates, we deal with 2 types of partials in styles: #[i global] and #[i local]. Having covered global partials in the beginning of this section, let's focus on partials as they're used in views.
    p.
        In line with convention, partial files not housed in a dedicated folder are individually prepended with an underscore (refer to the section on partials in #[em templates]). Looking at figure 4.15, we see that #[code.folder home] contains 3 partials: #[code.file _hello.styl], #[code.file _story.styl] and #[code.file _convert.styl]. We'll use the main stylesheet for the home section (#[code.file index.styl]) to gather these parts in their proper positions by using the file import ability of #[i Stylus].

    .explain.code

        .styl

            pre
                code.language-stylus.

                    .home
                        #[span.comment // partials]
                        @require '*_'

            aside #[span index.styl] #[b 4.17]

    p.
        The above is a simplified sample that serves to illustrate a method for including all the partials in a given directory (sectional level) by using #[code @require] (figure 4.16). Whilst taking in mind the cascade, the partials are set to only be targeted as children of #[code .home] as instructed by the indentation.
